#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// Define structure for a book
struct Book {
    int id;
    char title[100];
    char author[100];
    struct Book* next;
};

// Function to add a book to the list
void addBook(struct Book** head, int id, char title[], char author[]) {
    struct Book* newBook = (struct Book*)malloc(sizeof(struct Book));
    newBook->id = id;
    strcpy(newBook->title, title);
    strcpy(newBook->author, author);
    newBook->next = NULL;

    // If the list is empty, new book becomes the head
    if (*head == NULL) {
        *head = newBook;
    } else {
        // Traverse to the end of the list and add the book
        struct Book* temp = *head;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = newBook;
    }

    printf("Book added successfully.\n");
}

// Function to delete a book by ID
void deleteBook(struct Book** head, int id) {
    if (*head == NULL) {
        printf("No books available.\n");
        return;
    }

    struct Book* temp = *head;
    struct Book* prev = NULL;

    // If the book to be deleted is the head
    if (temp != NULL && temp->id == id) {
        *head = temp->next;
        free(temp);
        printf("Book with ID %d deleted successfully.\n", id);
        return;
    }

    // Search for the book to delete
    while (temp != NULL && temp->id != id) {
        prev = temp;
        temp = temp->next;
    }

    // If the book was not found
    if (temp == NULL) {
        printf("Book not found.\n");
        return;
    }

    // Unlink the book from the list
    prev->next = temp->next;
    free(temp);
    printf("Book with ID %d deleted successfully.\n", id);
}

// Function to search for a book by ID
void searchBook(struct Book* head, int id) {
    struct Book* temp = head;

    while (temp != NULL) {
        if (temp->id == id) {
            printf("Book Found: ID = %d, Title = %s, Author = %s\n", temp->id, temp->title, temp->author);
            return;
        }
        temp = temp->next;
    }

    printf("Book with ID %d not found.\n", id);
}

// Function to display all books
void displayBooks(struct Book* head) {
    if (head == NULL) {
        printf("No books available.\n");
        return;
    }

    struct Book* temp = head;
    while (temp != NULL) {
        printf("ID: %d, Title: %s, Author: %s\n", temp->id, temp->title, temp->author);
        temp = temp->next;
    }
}

// Main function
int main() {
    struct Book* head = NULL;
    int choice, id;
    char title[100], author[100];

    while (1) {
        printf("\nLibrary Management System\n");
        printf("1. Add Book\n");
        printf("2. Delete Book\n");
        printf("3. Search Book\n");
        printf("4. Display Books\n");
        printf("5. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter Book ID: ");
                scanf("%d", &id);
                printf("Enter Book Title: ");
                getchar();  // Consume newline character
                fgets(title, 100, stdin);
                title[strcspn(title, "\n")] = 0;  // Remove newline character
                printf("Enter Book Author: ");
                fgets(author, 100, stdin);
                author[strcspn(author, "\n")] = 0;  // Remove newline character
                addBook(&head, id, title, author);
                break;

            case 2:
                printf("Enter Book ID to delete: ");
                scanf("%d", &id);
                deleteBook(&head, id);
                break;

            case 3:
                printf("Enter Book ID to search: ");
                scanf("%d", &id);
                searchBook(head, id);
                break;

            case 4:
                displayBooks(head);
                break;

            case 5:
                printf("Exiting the program.\n");
                exit(0);

            default:
                printf("Invalid choice! Please try again.\n");
        }
    }

    return 0;
}
